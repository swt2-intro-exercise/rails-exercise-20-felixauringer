require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/papers', type: :request do
  # Paper. As you add validations to Paper, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: 'Test paper',
      venue: 'unknown venue',
      year: 1978
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      venue: 'unknown venue',
      year: 'twenty'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get papers_path
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      paper = Paper.create valid_attributes
      get paper_path(paper)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_paper_path
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      paper = Paper.create valid_attributes
      get edit_paper_path(paper)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Paper' do
        expect { post papers_path, params: { paper: valid_attributes } }.to change(Paper, :count).by(1)
      end

      it 'redirects to the created paper' do
        post papers_path, params: { paper: valid_attributes }
        expect(response).to redirect_to(paper_path(Paper.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Paper' do
        expect { post papers_path, params: { paper: invalid_attributes } }.not_to change(Paper, :count)
      end

      it 'renders the new template' do
        post papers_path, params: { paper: invalid_attributes }
        expect(response).to render_template :new
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'Another paper',
          venue: 'Another venue',
          year: 1789
        }
      end
      let(:author_ids) { FactoryBot.create_list(:author, 5).map(&:id) }
      let(:updated_author_ids) { FactoryBot.create_list(:author, 5).map(&:id) }

      it 'updates the requested paper' do
        paper = Paper.create valid_attributes
        patch paper_path(paper), params: { paper: new_attributes }
        paper.reload
        expect(paper.title).to eq(new_attributes[:title])
        expect(paper.venue).to eq(new_attributes[:venue])
        expect(paper.year).to eq(new_attributes[:year])
      end

      it 'updates the author list' do
        paper = Paper.create valid_attributes.merge(author_ids: author_ids)
        patch paper_path(paper), params: { paper: new_attributes.merge(author_ids: updated_author_ids) }
        paper.reload
        expect(paper.author_ids).to eq(updated_author_ids)
        expect(paper.author_ids).not_to include(author_ids)
      end

      it 'redirects to the paper' do
        paper = Paper.create valid_attributes
        patch paper_path(paper), params: { paper: new_attributes }
        paper.reload
        expect(response).to redirect_to(paper_path(paper))
      end
    end

    context 'with invalid parameters' do
      it 'does not update the requested paper' do
        paper = Paper.create valid_attributes
        patch paper_path(paper), params: { paper: invalid_attributes }
        paper.reload
        expect(paper.title).to eq(valid_attributes[:title])
        expect(paper.venue).to eq(valid_attributes[:venue])
        expect(paper.year).to eq(valid_attributes[:year])
      end

      it 'renders the edit template' do
        paper = Paper.create valid_attributes
        patch paper_path(paper), params: { paper: invalid_attributes }
        expect(response).to render_template :edit
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested paper' do
      paper = Paper.create valid_attributes
      expect { delete paper_path(paper) }.to change(Paper, :count).by(-1)
    end

    it 'redirects to the papers list' do
      paper = Paper.create valid_attributes
      delete paper_path(paper)
      expect(response).to redirect_to(papers_path)
    end
  end
end
